//This is the Odd Even Project
//Dimitri van Well 

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <time.h>
#define n 128

int IncOrder(const void *e1, const void *e2)
{
	return(*((int *)e1) - *((int *)e2));
}

main(int argc, char *argv[]) 
{ 
	double start,end;
	//int n = 128; /* The total number of elements to be sorted */
	int npes; /* The total number of processes */
	int myrank; /* The rank of the calling process */
	int nlocal; /* The local number of elements, and the array that stores them */
	int *elmnts; /* The array that stores the local elements */
	int *relmnts; /* The array that stores the received elements */
	int oddrank; /* The rank of the process during odd-phase communication */
	int evenrank; /* The rank of the process during even-phase communication */	
	int *wspace; /* Working space during the compare-split operation */
	int i; 
	int lower = 0; int upper = 128;
	int sctArr[n];
	MPI_Status status;
	
	/* Initialize MPI and get system information */
	MPI_Init(&argc, &argv); 
	MPI_Comm_size(MPI_COMM_WORLD, &npes); 
	MPI_Comm_rank(MPI_COMM_WORLD, &myrank); 
	
	nlocal = n/npes; /* Compute the number of elements to be stored locally. */
	int a[nlocal];
	int b[n];
	int check[nlocal];
	/* Allocate memory for the various arrays */
	elmnts = (int *)malloc(nlocal*sizeof(int)); 
	relmnts = (int *)malloc(nlocal*sizeof(int)); 
	wspace = (int *)malloc(nlocal*sizeof(int)); 
	
	/* Fill-in the elmnts array with random elements */
	if(myrank == 0)
	{
		start = MPI_Wtime();
		srand(time(0)); 
		for (i=0;i<n;i++)
		{
			sctArr[i] = (rand() % (upper - lower + 1)) + lower; //random num gen betwn 0-128
			b[i] = sctArr[i]; //while loop check			
		}
		qsort(b, n, sizeof(int), IncOrder);
	}
	MPI_Scatter(b,nlocal,MPI_INT,check,nlocal,MPI_INT,0,MPI_COMM_WORLD);
	MPI_Scatter(sctArr,nlocal,MPI_INT,a,nlocal,MPI_INT,0,MPI_COMM_WORLD);
	
	for (i=0;i<nlocal;i++)
	{	
		elmnts[i] = a[i];
	}

	/* Sort the local elements using the built-in quicksort routine */
	qsort(elmnts, nlocal, sizeof(int), IncOrder);

	/* Determine the rank of the processors that myrank needs to communicate during */
	/*the odd and even phases of the algorithm */
	if (myrank%2 == 0) { 
		oddrank = myrank-1; 
		evenrank = myrank+1; 
	} 
	else { 
		oddrank = myrank+1; 
		evenrank = myrank-1;
	}
	
	/* Set the ranks of the processors at the end of the linear */
	if (oddrank == -1 || oddrank == npes)
	{	
		oddrank = MPI_PROC_NULL; 
	}
	if (evenrank == -1 || evenrank == npes) 
	{
		evenrank = MPI_PROC_NULL; 
	}
	
	int count = 0;
	int counter;
	int done = 0;
	/* Get into the main loop of the odd-even sorting algorithm */
	while (done == 0)
	{
		for (i=0; i<npes-1; i++) { 
			if (i%2 == 1) /* Odd phase */
			{
				MPI_Sendrecv(elmnts, nlocal, MPI_INT, oddrank, 1, relmnts, nlocal, MPI_INT, oddrank, 1, MPI_COMM_WORLD, &status); 
			}
			else /* Even phase */
			{
				MPI_Sendrecv(elmnts, nlocal, MPI_INT, evenrank, 1, relmnts, nlocal, MPI_INT, evenrank, 1, MPI_COMM_WORLD, &status);
			}
			CompareSplit(nlocal, elmnts, relmnts, wspace, myrank < status.MPI_SOURCE);
			for(int r=0;r<nlocal;r++)
			{
				if(elmnts[r] == wspace[r])
				{
					count++;
					//printf("\ncou : %i\n",count);
				}
			}
			MPI_Allreduce(&count,&counter,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD);
			//printf("\n coun: %i \n",counter);
			count = 0;
			if(counter==n)
			{
				done = 1;
				break;//TRUE
			}
		}
	}

	printf("\nProcess %i: done\n",myrank);

	MPI_Barrier(MPI_COMM_WORLD);
	int gthrArr[n];
	MPI_Gather(elmnts, nlocal, MPI_INT,gthrArr,nlocal,MPI_INT,0,MPI_COMM_WORLD);
	
	if (myrank == 0)
	{	
		end = MPI_Wtime();
		printf("Time for execution: %f\n", (end-start));
		FILE *fp=fopen("result.txt","w+");
		int cnt = 0;
	        int h;
			for(h=0;h<n;h++)
			{
				if(cnt == nlocal)
				{
					fprintf(fp,"\n");
					cnt = 0;
				}
				fprintf(fp," %d ",gthrArr[h]);
				cnt++;
			}
			fprintf(fp,"\n");
		fclose(fp);
	}


	free(elmnts); free(relmnts); free(wspace);
	MPI_Finalize();
}

CompareSplit(int nlocal, int *elmnts, int *relmnts, int *wspace, int keepsmall)
{
	int i,j,k;


	for(i=0;i<nlocal; i++)
	{
		wspace[i] = elmnts[i];
	}
	
	if(keepsmall)
	{
		for (i=j=k=0; k<nlocal; k++) { 
			if (j == nlocal || (i < nlocal && wspace[i] < relmnts[j])) 
			{
				elmnts[k] = wspace[i++];
			}
			else
			{
				elmnts[k] = relmnts[j++];
			}
		}
	}
	
	else
	{
		for(i=k=nlocal-1, j=nlocal-1; k>=0; k--)
		{
			if(j == 0 || (i >= 0 && wspace[i] >= relmnts[j]))
			{
				elmnts[k] = wspace[i--]; 
			}
			else
			{
				elmnts[k] = relmnts[j--];
			}
		}
	}
}

